# =============================================================================
# CodegenCICD - Full Stack Docker Compose Configuration
# Complete development and production environment setup
# =============================================================================

version: '3.8'

# =============================================================================
# SHARED NETWORKS
# =============================================================================
networks:
  codegencd-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# =============================================================================
# SHARED VOLUMES
# =============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  grainchain-workspaces:
    driver: local

# =============================================================================
# CORE SERVICES
# =============================================================================
services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: codegencd-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-codegencd}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - codegencd-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-codegencd}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  redis:
    image: redis:7-alpine
    container_name: codegencd-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - codegencd-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: ${DOCKER_TARGET:-development}
      args:
        CONFIG_TIER: ${CONFIG_TIER:-basic}
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION:-dev}
        VCS_REF: ${VCS_REF:-dev}
    container_name: codegencd-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-codegencd}
      
      # Redis Configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      
      # Security Configuration
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      ENCRYPTION_SALT: ${ENCRYPTION_SALT}
      
      # Application Configuration
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # External API Configuration
      CODEGEN_ORG_ID: ${CODEGEN_ORG_ID}
      CODEGEN_API_TOKEN: ${CODEGEN_API_TOKEN}
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      CLOUDFLARE_API_KEY: ${CLOUDFLARE_API_KEY}
      CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID}
      CLOUDFLARE_WORKER_NAME: ${CLOUDFLARE_WORKER_NAME}
      CLOUDFLARE_WORKER_URL: ${CLOUDFLARE_WORKER_URL}
      
      # Integration Services
      GRAINCHAIN_URL: http://grainchain:8001
      WEB_EVAL_URL: http://web-eval-agent:8002
      GRAPH_SITTER_URL: http://graph-sitter:8003
      
      # Monitoring
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-false}
      SENTRY_DSN: ${SENTRY_DSN:-}
    volumes:
      - ./backend:/app:${VOLUME_MODE:-rw}
      - grainchain-workspaces:/tmp/grainchain_workspaces
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - codegencd-network
      - monitoring-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: ${DOCKER_TARGET:-development}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION:-dev}
        VCS_REF: ${VCS_REF:-dev}
    container_name: codegencd-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
      REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:8000}
      REACT_APP_ENVIRONMENT: ${ENVIRONMENT:-development}
      REACT_APP_VERSION: ${VERSION:-dev}
    volumes:
      - ./frontend:/app:${VOLUME_MODE:-rw}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - codegencd-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # INTEGRATION SERVICES
  # =============================================================================
  grainchain:
    image: grainchain/grainchain:latest
    container_name: codegencd-grainchain
    restart: unless-stopped
    environment:
      GRAINCHAIN_HOST: 0.0.0.0
      GRAINCHAIN_PORT: 8001
      GRAINCHAIN_WORKSPACE_DIR: /workspaces
      DOCKER_HOST: unix:///var/run/docker.sock
    volumes:
      - grainchain-workspaces:/workspaces
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${GRAINCHAIN_PORT:-8001}:8001"
    networks:
      - codegencd-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    profiles:
      - full
      - intermediate
      - advanced

  web-eval-agent:
    image: web-eval-agent/web-eval-agent:latest
    container_name: codegencd-web-eval
    restart: unless-stopped
    environment:
      WEB_EVAL_HOST: 0.0.0.0
      WEB_EVAL_PORT: 8002
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "${WEB_EVAL_PORT:-8002}:8002"
    networks:
      - codegencd-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    profiles:
      - full
      - intermediate
      - advanced

  graph-sitter:
    image: graph-sitter/graph-sitter:latest
    container_name: codegencd-graph-sitter
    restart: unless-stopped
    environment:
      GRAPH_SITTER_HOST: 0.0.0.0
      GRAPH_SITTER_PORT: 8003
      GRAPH_SITTER_LANGUAGES: ${GRAPH_SITTER_LANGUAGES:-typescript,javascript,python,rust,go}
    ports:
      - "${GRAPH_SITTER_PORT:-8003}:8003"
    networks:
      - codegencd-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - full
      - intermediate
      - advanced

  # =============================================================================
  # MONITORING SERVICES (Advanced Tier)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: codegencd-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - advanced
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: codegencd-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - advanced
      - monitoring

  # =============================================================================
  # REVERSE PROXY (Production)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: codegencd-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    networks:
      - codegencd-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    profiles:
      - production
      - nginx

  # =============================================================================
  # WORKER SERVICES (Intermediate+ Tier)
  # =============================================================================
  celery-worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: codegencd-celery-worker
    restart: unless-stopped
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=4
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-codegencd}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-}@redis:6379/0
    volumes:
      - grainchain-workspaces:/tmp/grainchain_workspaces
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - codegencd-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - intermediate
      - advanced
      - workers

  celery-beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: production
    container_name: codegencd-celery-beat
    restart: unless-stopped
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-codegencd}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-}@redis:6379/0
    networks:
      - codegencd-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    profiles:
      - intermediate
      - advanced
      - workers

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Basic development setup:
# docker-compose up postgres redis backend frontend

# Intermediate setup with workers:
# docker-compose --profile intermediate up

# Advanced setup with monitoring:
# docker-compose --profile advanced up

# Production setup with nginx:
# docker-compose --profile production up

# Full monitoring stack:
# docker-compose --profile monitoring up prometheus grafana

# Development with hot reload:
# DOCKER_TARGET=development VOLUME_MODE=rw docker-compose up

# Production deployment:
# DOCKER_TARGET=production ENVIRONMENT=production docker-compose --profile production up -d

