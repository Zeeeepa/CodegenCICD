# =============================================================================
# CodegenCICD Dashboard - Complete Docker Compose Configuration
# Supports development, staging, and production deployments
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: codegencd_postgres
    environment:
      POSTGRES_DB: codegencd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-codegencd_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - codegencd_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d codegencd"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: codegencd_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - codegencd_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        - CONFIG_TIER=${CONFIG_TIER:-basic}
    container_name: codegencd_backend
    environment:
      - CONFIG_TIER=${CONFIG_TIER:-basic}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Database
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-codegencd_secure_password}@postgres:5432/codegencd
      - REDIS_URL=redis://redis:6379/0
      
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENCRYPTION_SALT=${ENCRYPTION_SALT}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      
      # External APIs
      - CODEGEN_ORG_ID=${CODEGEN_ORG_ID}
      - CODEGEN_API_TOKEN=${CODEGEN_API_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
      - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      - CLOUDFLARE_WORKER_NAME=${CLOUDFLARE_WORKER_NAME}
      - CLOUDFLARE_WORKER_URL=${CLOUDFLARE_WORKER_URL}
      
      # Validation Tools
      - GRAINCHAIN_ENABLED=${GRAINCHAIN_ENABLED:-true}
      - WEB_EVAL_ENABLED=${WEB_EVAL_ENABLED:-true}
      - GRAPH_SITTER_ENABLED=${GRAPH_SITTER_ENABLED:-true}
      
      # Docker socket for grainchain
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - grainchain_workspaces:/tmp/grainchain_workspaces
      - validation_workspaces:/tmp/validation_workspaces
    ports:
      - "8000:8000"
    networks:
      - codegencd_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
        - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8000}
    container_name: codegencd_frontend
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - REACT_APP_WS_URL=ws://backend:8000
    ports:
      - "3000:3000"
    networks:
      - codegencd_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # BACKGROUND WORKERS (Intermediate+ Tier)
  # =============================================================================
  celery_worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: codegencd_celery_worker
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=4
    environment:
      - CONFIG_TIER=${CONFIG_TIER:-basic}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-codegencd_secure_password}@postgres:5432/codegencd
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      
      # External APIs
      - CODEGEN_ORG_ID=${CODEGEN_ORG_ID}
      - CODEGEN_API_TOKEN=${CODEGEN_API_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - grainchain_workspaces:/tmp/grainchain_workspaces
    networks:
      - codegencd_network
    depends_on:
      - postgres
      - redis
    profiles:
      - intermediate
      - advanced
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: codegencd_celery_beat
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      - CONFIG_TIER=${CONFIG_TIER:-basic}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-codegencd_secure_password}@postgres:5432/codegencd
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - codegencd_network
    depends_on:
      - postgres
      - redis
    profiles:
      - intermediate
      - advanced
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES (Advanced Tier)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: codegencd_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - codegencd_network
    profiles:
      - advanced
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: codegencd_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - codegencd_network
    depends_on:
      - prometheus
    profiles:
      - advanced
    restart: unless-stopped

  # =============================================================================
  # REVERSE PROXY (Production)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: codegencd_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - codegencd_network
    depends_on:
      - backend
      - frontend
    profiles:
      - production
    restart: unless-stopped

  # =============================================================================
  # VALIDATION TOOLS (Optional External Services)
  # =============================================================================
  grainchain:
    image: grainchain/grainchain:latest
    container_name: codegencd_grainchain
    environment:
      - GRAINCHAIN_PORT=8001
      - GRAINCHAIN_WORKSPACE_DIR=/workspaces
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - grainchain_workspaces:/workspaces
    ports:
      - "8001:8001"
    networks:
      - codegencd_network
    profiles:
      - validation-tools
    restart: unless-stopped

  web-eval-agent:
    image: web-eval-agent/web-eval-agent:latest
    container_name: codegencd_web_eval
    environment:
      - WEB_EVAL_PORT=8002
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    ports:
      - "8002:8002"
    networks:
      - codegencd_network
    profiles:
      - validation-tools
    restart: unless-stopped

  graph-sitter:
    image: graph-sitter/graph-sitter:latest
    container_name: codegencd_graph_sitter
    environment:
      - GRAPH_SITTER_PORT=8003
    ports:
      - "8003:8003"
    networks:
      - codegencd_network
    profiles:
      - validation-tools
    restart: unless-stopped

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  codegencd_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  grainchain_workspaces:
    driver: local
  validation_workspaces:
    driver: local

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Basic Development Setup:
# docker-compose up -d

# Intermediate Setup (with background workers):
# docker-compose --profile intermediate up -d

# Advanced Setup (with monitoring):
# docker-compose --profile advanced up -d

# Production Setup (with nginx):
# docker-compose --profile production up -d

# Full Setup (all services):
# docker-compose --profile intermediate --profile advanced --profile validation-tools up -d

# Scale workers:
# docker-compose --profile intermediate up -d --scale celery_worker=4

# View logs:
# docker-compose logs -f backend
# docker-compose logs -f celery_worker

# Health checks:
# docker-compose ps
# curl http://localhost:8000/health

