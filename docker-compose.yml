version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: codegencd_postgres
    environment:
      POSTGRES_DB: codegencd
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - codegencd_network

  # Redis for Celery and WebSocket sessions
  redis:
    image: redis:7-alpine
    container_name: codegencd_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - codegencd_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: codegencd_backend
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/codegencd
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-}
      ENCRYPTION_SALT: ${ENCRYPTION_SALT:-your-salt-change-in-production}
      
      # Codegen API
      CODEGEN_ORG_ID: ${CODEGEN_ORG_ID:-323}
      CODEGEN_API_TOKEN: ${CODEGEN_API_TOKEN:-}
      
      # GitHub Integration
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      
      # Gemini API
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      
      # Cloudflare
      CLOUDFLARE_API_KEY: ${CLOUDFLARE_API_KEY:-}
      CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID:-}
      CLOUDFLARE_WORKER_NAME: ${CLOUDFLARE_WORKER_NAME:-webhook-gateway}
      CLOUDFLARE_WORKER_URL: ${CLOUDFLARE_WORKER_URL:-}
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For grainchain integration
      - validation_workspaces:/tmp/validation_workspaces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - codegencd_network

  # Celery Worker for background tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: codegencd_celery_worker
    command: celery -A backend.celery_app worker --loglevel=info --concurrency=4
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/codegencd
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-}
      ENCRYPTION_SALT: ${ENCRYPTION_SALT:-your-salt-change-in-production}
      CODEGEN_ORG_ID: ${CODEGEN_ORG_ID:-323}
      CODEGEN_API_TOKEN: ${CODEGEN_API_TOKEN:-}
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      CLOUDFLARE_API_KEY: ${CLOUDFLARE_API_KEY:-}
      CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID:-}
      CLOUDFLARE_WORKER_NAME: ${CLOUDFLARE_WORKER_NAME:-webhook-gateway}
      CLOUDFLARE_WORKER_URL: ${CLOUDFLARE_WORKER_URL:-}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - validation_workspaces:/tmp/validation_workspaces
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - codegencd_network

  # Celery Beat for scheduled tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: codegencd_celery_beat
    command: celery -A backend.celery_app beat --loglevel=info
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/codegencd
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-}
      ENCRYPTION_SALT: ${ENCRYPTION_SALT:-your-salt-change-in-production}
      CODEGEN_ORG_ID: ${CODEGEN_ORG_ID:-323}
      CODEGEN_API_TOKEN: ${CODEGEN_API_TOKEN:-}
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - codegencd_network

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:8000}
    container_name: codegencd_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - codegencd_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: codegencd_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - codegencd_network
    profiles:
      - production

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: codegencd_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - codegencd_network
    profiles:
      - monitoring

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: codegencd_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - codegencd_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  validation_workspaces:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  codegencd_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
