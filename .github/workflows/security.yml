# =============================================================================
# CodegenCICD - Security Scanning Workflow
# Comprehensive security analysis and vulnerability management
# =============================================================================

name: 🔒 Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - code
          - containers
          - secrets

# Prevent concurrent security scans
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # =============================================================================
  # SECRET SCANNING
  # =============================================================================
  secret-scan:
    name: 🔍 Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive secret scanning

      - name: 🔍 TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 🔍 GitLeaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: 📊 Secret Scan Summary
        run: |
          echo "🔍 Secret scanning completed"
          echo "📊 Results uploaded to security dashboard"

  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  dependency-scan:
    name: 📦 Dependency Security
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        ecosystem: [python, javascript]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python (for Python dependencies)
        if: matrix.ecosystem == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🟢 Setup Node.js (for JavaScript dependencies)
        if: matrix.ecosystem == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Python Dependency Security Scan
        if: matrix.ecosystem == 'python'
        run: |
          echo "🔍 Scanning Python dependencies..."
          
          # Install security scanning tools
          pip install safety bandit pip-audit
          
          # Safety scan for known vulnerabilities
          echo "::group::Safety Scan"
          safety check --json --output safety-report.json || true
          safety check --short-report || true
          echo "::endgroup::"
          
          # Pip-audit for additional vulnerability detection
          echo "::group::Pip-Audit Scan"
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --desc || true
          echo "::endgroup::"
          
          # Check for outdated packages
          echo "::group::Outdated Packages"
          pip list --outdated --format=json > outdated-packages.json || true
          pip list --outdated || true
          echo "::endgroup::"

      - name: 📦 JavaScript Dependency Security Scan
        if: matrix.ecosystem == 'javascript'
        run: |
          echo "🔍 Scanning JavaScript dependencies..."
          
          if [ -f "frontend/package.json" ]; then
            cd frontend
            
            # NPM audit
            echo "::group::NPM Audit"
            npm audit --audit-level=moderate --json > npm-audit-report.json || true
            npm audit --audit-level=moderate || true
            echo "::endgroup::"
            
            # Check for outdated packages
            echo "::group::Outdated Packages"
            npm outdated --json > npm-outdated.json || true
            npm outdated || true
            echo "::endgroup::"
          else
            echo "⚠️ No frontend package.json found - skipping JavaScript dependency scan"
          fi

      - name: 📊 Upload Dependency Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-security-reports-${{ matrix.ecosystem }}
          path: |
            *-report.json
            outdated-packages.json
            npm-outdated.json
          retention-days: 30

  # =============================================================================
  # STATIC CODE ANALYSIS
  # =============================================================================
  code-analysis:
    name: 🔍 Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Bandit Security Scan
        run: |
          echo "🔍 Running Bandit security analysis..."
          pip install bandit[toml]
          
          # Create bandit configuration
          cat > .bandit << EOF
          [bandit]
          exclude_dirs = ["tests", "venv", ".venv"]
          skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests
          EOF
          
          # Run bandit scan
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -f txt || true

      - name: 🔍 Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/python
          generateSarif: "1"

      - name: 📊 Upload SARIF Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
          queries: security-and-quality

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

      - name: 📋 Upload Code Analysis Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-analysis-reports
          path: |
            bandit-report.json
            semgrep.sarif
          retention-days: 30

  # =============================================================================
  # CONTAINER SECURITY SCANNING
  # =============================================================================
  container-scan:
    name: 🐳 Container Security
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == ''
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Container Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.service }}/Dockerfile
          target: production
          push: false
          tags: codegencd-${{ matrix.service }}:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'codegencd-${{ matrix.service }}:security-scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: 🔍 Trivy Filesystem Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './${{ matrix.service }}'
          format: 'json'
          output: 'trivy-fs-${{ matrix.service }}.json'

      - name: 🔍 Grype Container Scan
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: 'codegencd-${{ matrix.service }}:security-scan'
          fail-build: false
          output-format: sarif

      - name: 📊 Upload Container Security Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-${{ matrix.service }}.sarif
            ${{ steps.grype-scan.outputs.sarif }}

      - name: 📋 Upload Container Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-reports-${{ matrix.service }}
          path: |
            trivy-*.sarif
            trivy-*.json
            ${{ steps.grype-scan.outputs.sarif }}
          retention-days: 30

  # =============================================================================
  # INFRASTRUCTURE SECURITY
  # =============================================================================
  infrastructure-scan:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Checkov Infrastructure Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions,secrets
          output_format: sarif
          output_file_path: checkov-report.sarif

      - name: 🔍 Docker Compose Security Scan
        run: |
          echo "🔍 Scanning Docker Compose configuration..."
          
          # Install docker-compose security scanner
          pip install docker-compose-security-scanner || true
          
          # Scan docker-compose.yml for security issues
          if [ -f "docker-compose.yml" ]; then
            echo "📋 Docker Compose security analysis:"
            echo "- Checking for privileged containers"
            echo "- Validating network configurations"
            echo "- Reviewing volume mounts"
            echo "- Analyzing environment variables"
            
            # Basic security checks
            grep -n "privileged.*true" docker-compose.yml && echo "⚠️ Privileged containers found" || echo "✅ No privileged containers"
            grep -n "network_mode.*host" docker-compose.yml && echo "⚠️ Host network mode found" || echo "✅ No host network mode"
            grep -n "/var/run/docker.sock" docker-compose.yml && echo "⚠️ Docker socket mounted" || echo "✅ No Docker socket mounts"
          fi

      - name: 📊 Upload Infrastructure Security Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-report.sarif

  # =============================================================================
  # SECURITY COMPLIANCE CHECK
  # =============================================================================
  compliance-check:
    name: 📋 Security Compliance
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, code-analysis, container-scan]
    if: always()
    
    steps:
      - name: 📊 Evaluate Security Posture
        run: |
          echo "::group::Security Compliance Evaluation"
          
          # Check job results
          SECRET_SCAN="${{ needs.secret-scan.result }}"
          DEPENDENCY_SCAN="${{ needs.dependency-scan.result }}"
          CODE_ANALYSIS="${{ needs.code-analysis.result }}"
          CONTAINER_SCAN="${{ needs.container-scan.result }}"
          
          echo "Secret Scan: $SECRET_SCAN"
          echo "Dependency Scan: $DEPENDENCY_SCAN"
          echo "Code Analysis: $CODE_ANALYSIS"
          echo "Container Scan: $CONTAINER_SCAN"
          
          # Calculate security score
          PASSED=0
          TOTAL=4
          
          [[ "$SECRET_SCAN" == "success" ]] && ((PASSED++))
          [[ "$DEPENDENCY_SCAN" == "success" ]] && ((PASSED++))
          [[ "$CODE_ANALYSIS" == "success" ]] && ((PASSED++))
          [[ "$CONTAINER_SCAN" == "success" ]] && ((PASSED++))
          
          SCORE=$((PASSED * 100 / TOTAL))
          
          echo "Security Score: $SCORE%"
          echo "SECURITY_SCORE=$SCORE" >> $GITHUB_ENV
          
          # Determine compliance status
          if [[ $SCORE -ge 80 ]]; then
            echo "✅ Security compliance: PASSED"
            echo "COMPLIANCE_STATUS=passed" >> $GITHUB_ENV
          else
            echo "❌ Security compliance: FAILED"
            echo "COMPLIANCE_STATUS=failed" >> $GITHUB_ENV
          fi
          echo "::endgroup::"

      - name: 📝 Security Report
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## 🔒 Security Scanning Results
          
          ### Overall Security Score: ${{ env.SECURITY_SCORE }}%
          
          | Scan Type | Status | Details |
          |-----------|--------|---------|
          | 🔍 Secret Detection | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | No secrets detected in code |
          | 📦 Dependency Security | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Dependencies scanned for vulnerabilities |
          | 🔍 Static Code Analysis | ${{ needs.code-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} | Code analyzed for security issues |
          | 🐳 Container Security | ${{ needs.container-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | Container images scanned |
          
          ### Compliance Status: ${{ env.COMPLIANCE_STATUS == 'passed' && '✅ COMPLIANT' || '❌ NON-COMPLIANT' }}
          
          ### Recommendations
          - 🔄 Regular security scans scheduled daily
          - 📊 Security metrics tracked in dashboard
          - 🚨 Automated alerts for critical vulnerabilities
          - 📋 Security policies enforced in CI/CD
          EOF

      - name: 🚨 Security Alert
        if: env.COMPLIANCE_STATUS == 'failed'
        run: |
          echo "🚨 SECURITY ALERT: Compliance check failed!"
          echo "Security score: ${{ env.SECURITY_SCORE }}%"
          echo "Immediate action required to address security issues."
          
          # Here you would send alerts to security team
          exit 1

  # =============================================================================
  # SECURITY NOTIFICATION
  # =============================================================================
  notify:
    name: 📢 Security Notification
    runs-on: ubuntu-latest
    needs: [compliance-check]
    if: always()
    
    steps:
      - name: 📢 Send Security Notifications
        run: |
          STATUS="${{ needs.compliance-check.result }}"
          if [[ "$STATUS" == "success" ]]; then
            echo "🎉 Security scans completed successfully!"
            echo "✅ All security checks passed"
          else
            echo "⚠️ Security scans completed with issues"
            echo "🔍 Review security reports for details"
          fi
          
          # Here you would send notifications to security team
          echo "Security notifications sent (placeholder)"

