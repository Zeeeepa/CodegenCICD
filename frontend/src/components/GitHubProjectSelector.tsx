import React, { useState, useMemo } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemAvatar,\n  ListItemButton,\n  Avatar,\n  Typography,\n  TextField,\n  InputAdornment,\n  Box,\n  Chip,\n  Divider,\n  IconButton,\n  Tooltip,\n  CircularProgress\n} from '@mui/material';\nimport {\n  GitHub as GitHubIcon,\n  Search as SearchIcon,\n  Lock as LockIcon,\n  Public as PublicIcon,\n  Star as StarIcon,\n  Close as CloseIcon,\n  Add as AddIcon,\n  Check as CheckIcon\n} from '@mui/icons-material';\n\ninterface GitHubRepository {\n  id: number;\n  name: string;\n  full_name: string;\n  description?: string;\n  owner: string;\n  url: string;\n  clone_url: string;\n  default_branch: string;\n  private: boolean;\n  updated_at: string;\n}\n\ninterface ProjectData {\n  id: number;\n  github_id: number;\n  name: string;\n  full_name: string;\n}\n\ninterface GitHubProjectSelectorProps {\n  open: boolean;\n  repositories: GitHubRepository[];\n  existingProjects: ProjectData[];\n  onClose: () => void;\n  onSelectRepository: (repo: GitHubRepository) => void;\n}\n\nexport const GitHubProjectSelector: React.FC<GitHubProjectSelectorProps> = ({\n  open,\n  repositories,\n  existingProjects,\n  onClose,\n  onSelectRepository\n}) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedRepo, setSelectedRepo] = useState<GitHubRepository | null>(null);\n  const [adding, setAdding] = useState(false);\n\n  // Get existing project GitHub IDs for filtering\n  const existingGitHubIds = useMemo(() => {\n    return new Set(existingProjects.map(p => p.github_id));\n  }, [existingProjects]);\n\n  // Filter repositories based on search term and exclude existing projects\n  const filteredRepositories = useMemo(() => {\n    return repositories\n      .filter(repo => !existingGitHubIds.has(repo.id))\n      .filter(repo => {\n        if (!searchTerm) return true;\n        const term = searchTerm.toLowerCase();\n        return (\n          repo.name.toLowerCase().includes(term) ||\n          repo.full_name.toLowerCase().includes(term) ||\n          (repo.description && repo.description.toLowerCase().includes(term))\n        );\n      })\n      .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());\n  }, [repositories, searchTerm, existingGitHubIds]);\n\n  const handleSelectRepository = async (repo: GitHubRepository) => {\n    setSelectedRepo(repo);\n    setAdding(true);\n    \n    try {\n      await onSelectRepository(repo);\n    } catch (error) {\n      console.error('Error adding repository:', error);\n    } finally {\n      setAdding(false);\n      setSelectedRepo(null);\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const handleClose = () => {\n    setSearchTerm('');\n    setSelectedRepo(null);\n    onClose();\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '80vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            <GitHubIcon />\n            <Typography variant=\"h6\">\n              Select GitHub Repository\n            </Typography>\n          </Box>\n          \n          <IconButton onClick={handleClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent dividers>\n        {/* Search */}\n        <TextField\n          fullWidth\n          placeholder=\"Search repositories...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n          sx={{ mb: 2 }}\n        />\n\n        {/* Repository List */}\n        {filteredRepositories.length === 0 ? (\n          <Box textAlign=\"center\" py={4}>\n            {repositories.length === 0 ? (\n              <>\n                <GitHubIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n                <Typography variant=\"h6\" color=\"text.secondary\">\n                  No Repositories Found\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Make sure you have repositories in your GitHub account.\n                </Typography>\n              </>\n            ) : existingGitHubIds.size === repositories.length ? (\n              <>\n                <CheckIcon sx={{ fontSize: 48, color: 'success.main', mb: 2 }} />\n                <Typography variant=\"h6\" color=\"text.secondary\">\n                  All Repositories Added\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  You've already added all your repositories to the dashboard.\n                </Typography>\n              </>\n            ) : (\n              <>\n                <SearchIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\n                <Typography variant=\"h6\" color=\"text.secondary\">\n                  No Matching Repositories\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Try adjusting your search terms.\n                </Typography>\n              </>\n            )}\n          </Box>\n        ) : (\n          <List sx={{ width: '100%' }}>\n            {filteredRepositories.map((repo, index) => (\n              <React.Fragment key={repo.id}>\n                <ListItem disablePadding>\n                  <ListItemButton\n                    onClick={() => handleSelectRepository(repo)}\n                    disabled={adding && selectedRepo?.id === repo.id}\n                    sx={{\n                      borderRadius: 1,\n                      mb: 1,\n                      '&:hover': {\n                        backgroundColor: 'action.hover'\n                      }\n                    }}\n                  >\n                    <ListItemAvatar>\n                      <Avatar sx={{ bgcolor: 'primary.main' }}>\n                        {adding && selectedRepo?.id === repo.id ? (\n                          <CircularProgress size={20} color=\"inherit\" />\n                        ) : (\n                          <GitHubIcon />\n                        )}\n                      </Avatar>\n                    </ListItemAvatar>\n                    \n                    <ListItemText\n                      primary={\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                            {repo.name}\n                          </Typography>\n                          \n                          <Tooltip title={repo.private ? \"Private Repository\" : \"Public Repository\"}>\n                            {repo.private ? (\n                              <LockIcon fontSize=\"small\" color=\"action\" />\n                            ) : (\n                              <PublicIcon fontSize=\"small\" color=\"action\" />\n                            )}\n                          </Tooltip>\n                        </Box>\n                      }\n                      secondary={\n                        <Box>\n                          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                            {repo.full_name}\n                          </Typography>\n                          \n                          {repo.description && (\n                            <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                              {repo.description}\n                            </Typography>\n                          )}\n                          \n                          <Box display=\"flex\" alignItems=\"center\" gap={1} flexWrap=\"wrap\">\n                            <Chip \n                              label={repo.default_branch} \n                              size=\"small\" \n                              variant=\"outlined\"\n                            />\n                            \n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              Updated {formatDate(repo.updated_at)}\n                            </Typography>\n                          </Box>\n                        </Box>\n                      }\n                    />\n                    \n                    <Box ml={2}>\n                      <Button\n                        variant=\"outlined\"\n                        startIcon={<AddIcon />}\n                        disabled={adding && selectedRepo?.id === repo.id}\n                        size=\"small\"\n                      >\n                        {adding && selectedRepo?.id === repo.id ? 'Adding...' : 'Add'}\n                      </Button>\n                    </Box>\n                  </ListItemButton>\n                </ListItem>\n                \n                {index < filteredRepositories.length - 1 && <Divider />}\n              </React.Fragment>\n            ))}\n          </List>\n        )}\n      </DialogContent>\n      \n      <DialogActions>\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 'auto' }}>\n          {filteredRepositories.length} repositories available\n        </Typography>\n        \n        <Button onClick={handleClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default GitHubProjectSelector;

