import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  AppBar,\n  Toolbar,\n  Button,\n  Grid,\n  Card,\n  CardContent,\n  Snackbar,\n  Alert,\n  CircularProgress,\n  Fab,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Chip,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport {\n  Add as AddIcon,\n  GitHub as GitHubIcon,\n  Refresh as RefreshIcon,\n  Dashboard as DashboardIcon,\n  Settings as SettingsIcon,\n  PlayArrow as PlayArrowIcon,\n  CloudQueue as CloudIcon\n} from '@mui/icons-material';\n\nimport { ProjectCard } from './ProjectCard';\nimport { GitHubProjectSelector } from './GitHubProjectSelector';\nimport { AgentRunDialog } from './AgentRunDialog';\nimport { ProjectSettingsDialog } from './ProjectSettingsDialog';\n\ninterface GitHubRepository {\n  id: number;\n  name: string;\n  full_name: string;\n  description?: string;\n  owner: string;\n  url: string;\n  clone_url: string;\n  default_branch: string;\n  private: boolean;\n  updated_at: string;\n}\n\ninterface ProjectData {\n  id: number;\n  github_id: number;\n  name: string;\n  full_name: string;\n  description?: string;\n  github_owner: string;\n  github_repo: string;\n  github_branch: string;\n  github_url: string;\n  webhook_active: boolean;\n  webhook_url: string;\n  auto_merge_enabled: boolean;\n  auto_confirm_plans: boolean;\n  auto_merge_threshold: number;\n  status: string;\n  validation_enabled: boolean;\n  has_repository_rules: boolean;\n  has_setup_commands: boolean;\n  has_secrets: boolean;\n  has_planning_statement: boolean;\n  total_runs: number;\n  success_rate: number;\n  created_at: string;\n  updated_at?: string;\n  current_agent_run?: {\n    id: number;\n    status: string;\n    progress_percentage: number;\n    run_type: string;\n    target: string;\n    pr_url?: string;\n    pr_number?: number;\n  };\n}\n\ninterface SnackbarState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'error' | 'warning' | 'info';\n}\n\nexport const ProjectDashboard: React.FC = () => {\n  // State management\n  const [projects, setProjects] = useState<ProjectData[]>([]);\n  const [githubRepos, setGithubRepos] = useState<GitHubRepository[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [reposLoading, setReposLoading] = useState(false);\n  \n  // Dialog states\n  const [selectorOpen, setSelectorOpen] = useState(false);\n  const [agentRunDialog, setAgentRunDialog] = useState<{\n    open: boolean;\n    projectId?: number;\n    projectName?: string;\n  }>({ open: false });\n  const [settingsDialog, setSettingsDialog] = useState<{\n    open: boolean;\n    projectId?: number;\n  }>({ open: false });\n  \n  // Snackbar state\n  const [snackbar, setSnackbar] = useState<SnackbarState>({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n\n  // Load dashboard projects on mount\n  useEffect(() => {\n    loadDashboardProjects();\n  }, []);\n\n  const showSnackbar = (message: string, severity: SnackbarState['severity'] = 'info') => {\n    setSnackbar({ open: true, message, severity });\n  };\n\n  const loadDashboardProjects = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/projects/dashboard');\n      if (response.ok) {\n        const data = await response.json();\n        setProjects(data.projects);\n      } else {\n        showSnackbar('Failed to load projects', 'error');\n      }\n    } catch (error) {\n      console.error('Error loading projects:', error);\n      showSnackbar('Error loading projects', 'error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadGitHubRepositories = async () => {\n    try {\n      setReposLoading(true);\n      const response = await fetch('/api/projects/github-repositories');\n      if (response.ok) {\n        const data = await response.json();\n        setGithubRepos(data.repositories);\n        setSelectorOpen(true);\n      } else {\n        showSnackbar('Failed to load GitHub repositories', 'error');\n      }\n    } catch (error) {\n      console.error('Error loading GitHub repositories:', error);\n      showSnackbar('Error loading GitHub repositories', 'error');\n    } finally {\n      setReposLoading(false);\n    }\n  };\n\n  const handleAddProject = async (repo: GitHubRepository) => {\n    try {\n      const response = await fetch('/api/projects/add', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ github_repo_data: repo })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        showSnackbar(`${repo.name} added to dashboard`, 'success');\n        setSelectorOpen(false);\n        loadDashboardProjects(); // Reload to get updated data\n      } else {\n        showSnackbar('Failed to add project', 'error');\n      }\n    } catch (error) {\n      console.error('Error adding project:', error);\n      showSnackbar('Error adding project', 'error');\n    }\n  };\n\n  const handleRemoveProject = async (projectId: number) => {\n    try {\n      const response = await fetch(`/api/projects/${projectId}`, {\n        method: 'DELETE'\n      });\n\n      if (response.ok) {\n        showSnackbar('Project removed from dashboard', 'success');\n        loadDashboardProjects();\n      } else {\n        showSnackbar('Failed to remove project', 'error');\n      }\n    } catch (error) {\n      console.error('Error removing project:', error);\n      showSnackbar('Error removing project', 'error');\n    }\n  };\n\n  const handleAgentRun = (projectId: number, projectName: string) => {\n    setAgentRunDialog({ open: true, projectId, projectName });\n  };\n\n  const handleStartAgentRun = async (projectId: number, targetText: string, autoConfirmPlans: boolean) => {\n    try {\n      const response = await fetch('/api/agent-runs/', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          project_id: projectId,\n          target_text: targetText,\n          auto_confirm_plans: autoConfirmPlans\n        })\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        showSnackbar('Agent run started successfully!', 'success');\n        setAgentRunDialog({ open: false });\n        loadDashboardProjects(); // Reload to show current run\n      } else {\n        showSnackbar('Failed to start agent run', 'error');\n      }\n    } catch (error) {\n      console.error('Error starting agent run:', error);\n      showSnackbar('Error starting agent run', 'error');\n    }\n  };\n\n  const handleProjectSettings = (projectId: number) => {\n    setSettingsDialog({ open: true, projectId });\n  };\n\n  const handleUpdateProject = async (projectId: number, updates: any) => {\n    try {\n      // Update project configuration\n      if ('auto_merge_enabled' in updates || 'auto_confirm_plans' in updates) {\n        const response = await fetch(`/api/projects/${projectId}/config`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(updates)\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to update project configuration');\n        }\n      }\n\n      // Update project settings\n      const settingsUpdates = { ...updates };\n      delete settingsUpdates.auto_merge_enabled;\n      delete settingsUpdates.auto_confirm_plans;\n      delete settingsUpdates.auto_merge_threshold;\n      delete settingsUpdates.validation_enabled;\n\n      if (Object.keys(settingsUpdates).length > 0) {\n        const response = await fetch(`/api/projects/${projectId}/settings`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(settingsUpdates)\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to update project settings');\n        }\n      }\n\n      showSnackbar('Project updated successfully', 'success');\n      loadDashboardProjects();\n    } catch (error) {\n      console.error('Error updating project:', error);\n      showSnackbar('Error updating project', 'error');\n    }\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1, minHeight: '100vh', bgcolor: 'background.default' }}>\n      {/* App Bar */}\n      <AppBar position=\"static\" elevation={1}>\n        <Toolbar>\n          <DashboardIcon sx={{ mr: 2 }} />\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            CodegenCICD Dashboard\n          </Typography>\n          \n          <Tooltip title=\"Refresh Projects\">\n            <IconButton color=\"inherit\" onClick={loadDashboardProjects}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Button\n            color=\"inherit\"\n            startIcon={reposLoading ? <CircularProgress size={20} color=\"inherit\" /> : <GitHubIcon />}\n            onClick={loadGitHubRepositories}\n            disabled={reposLoading}\n          >\n            Add Project\n          </Button>\n        </Toolbar>\n      </AppBar>\n\n      {/* Main Content */}\n      <Container maxWidth=\"xl\" sx={{ mt: 4, mb: 4 }}>\n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n            <CircularProgress size={60} />\n          </Box>\n        ) : (\n          <>\n            {/* Header */}\n            <Box mb={4}>\n              <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n                Project Dashboard\n              </Typography>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                Manage your GitHub projects with AI-powered automation\n              </Typography>\n            </Box>\n\n            {/* Projects Grid */}\n            {projects.length === 0 ? (\n              <Card sx={{ textAlign: 'center', py: 8 }}>\n                <CardContent>\n                  <GitHubIcon sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }} />\n                  <Typography variant=\"h5\" gutterBottom>\n                    No Projects Added\n                  </Typography>\n                  <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n                    Add your first GitHub project to get started with AI-powered development automation.\n                  </Typography>\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<AddIcon />}\n                    onClick={loadGitHubRepositories}\n                    disabled={reposLoading}\n                  >\n                    Add GitHub Project\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              <Grid container spacing={3}>\n                {projects.map((project) => (\n                  <Grid item xs={12} sm={6} md={4} key={project.id}>\n                    <ProjectCard\n                      project={project}\n                      onAgentRun={() => handleAgentRun(project.id, project.name)}\n                      onSettings={() => handleProjectSettings(project.id)}\n                      onRemove={() => handleRemoveProject(project.id)}\n                      onUpdate={(updates) => handleUpdateProject(project.id, updates)}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            )}\n          </>\n        )}\n      </Container>\n\n      {/* Floating Action Button */}\n      <Fab\n        color=\"primary\"\n        aria-label=\"add project\"\n        sx={{ position: 'fixed', bottom: 16, right: 16 }}\n        onClick={loadGitHubRepositories}\n        disabled={reposLoading}\n      >\n        {reposLoading ? <CircularProgress size={24} color=\"inherit\" /> : <AddIcon />}\n      </Fab>\n\n      {/* Dialogs */}\n      <GitHubProjectSelector\n        open={selectorOpen}\n        repositories={githubRepos}\n        existingProjects={projects}\n        onClose={() => setSelectorOpen(false)}\n        onSelectRepository={handleAddProject}\n      />\n\n      <AgentRunDialog\n        open={agentRunDialog.open}\n        projectName={agentRunDialog.projectName || ''}\n        onClose={() => setAgentRunDialog({ open: false })}\n        onStartRun={(targetText, autoConfirmPlans) => \n          handleStartAgentRun(agentRunDialog.projectId!, targetText, autoConfirmPlans)\n        }\n      />\n\n      <ProjectSettingsDialog\n        open={settingsDialog.open}\n        projectId={settingsDialog.projectId}\n        onClose={() => setSettingsDialog({ open: false })}\n        onSave={(settings) => {\n          if (settingsDialog.projectId) {\n            handleUpdateProject(settingsDialog.projectId, settings);\n          }\n          setSettingsDialog({ open: false });\n        }}\n      />\n\n      {/* Snackbar */}\n      <Snackbar\n        open={snackbar.open}\n        autoHideDuration={6000}\n        onClose={() => setSnackbar({ ...snackbar, open: false })}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n      >\n        <Alert\n          onClose={() => setSnackbar({ ...snackbar, open: false })}\n          severity={snackbar.severity}\n          variant=\"filled\"\n        >\n          {snackbar.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default ProjectDashboard;

