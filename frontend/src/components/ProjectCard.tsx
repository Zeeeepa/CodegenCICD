import React, { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Typography,\n  Button,\n  IconButton,\n  Chip,\n  Box,\n  LinearProgress,\n  Tooltip,\n  Menu,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  Badge,\n  Avatar,\n  Divider,\n  Link\n} from '@mui/material';\nimport {\n  PlayArrow as PlayArrowIcon,\n  Settings as SettingsIcon,\n  MoreVert as MoreVertIcon,\n  GitHub as GitHubIcon,\n  CloudQueue as CloudIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Schedule as ScheduleIcon,\n  Merge as MergeIcon,\n  Code as CodeIcon,\n  Security as SecurityIcon,\n  Build as BuildIcon,\n  Delete as DeleteIcon,\n  OpenInNew as OpenInNewIcon,\n  Webhook as WebhookIcon\n} from '@mui/icons-material';\n\ninterface ProjectData {\n  id: number;\n  github_id: number;\n  name: string;\n  full_name: string;\n  description?: string;\n  github_owner: string;\n  github_repo: string;\n  github_branch: string;\n  github_url: string;\n  webhook_active: boolean;\n  webhook_url: string;\n  auto_merge_enabled: boolean;\n  auto_confirm_plans: boolean;\n  auto_merge_threshold: number;\n  status: string;\n  validation_enabled: boolean;\n  has_repository_rules: boolean;\n  has_setup_commands: boolean;\n  has_secrets: boolean;\n  has_planning_statement: boolean;\n  total_runs: number;\n  success_rate: number;\n  created_at: string;\n  updated_at?: string;\n  current_agent_run?: {\n    id: number;\n    status: string;\n    progress_percentage: number;\n    run_type: string;\n    target: string;\n    pr_url?: string;\n    pr_number?: number;\n  };\n}\n\ninterface ProjectCardProps {\n  project: ProjectData;\n  onAgentRun: () => void;\n  onSettings: () => void;\n  onRemove: () => void;\n  onUpdate: (updates: any) => void;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = ({\n  project,\n  onAgentRun,\n  onSettings,\n  onRemove,\n  onUpdate\n}) => {\n  const [menuAnchor, setMenuAnchor] = useState<null | HTMLElement>(null);\n  const menuOpen = Boolean(menuAnchor);\n\n  const handleMenuClick = (event: React.MouseEvent<HTMLElement>) => {\n    setMenuAnchor(event.currentTarget);\n  };\n\n  const handleMenuClose = () => {\n    setMenuAnchor(null);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active': return 'success';\n      case 'paused': return 'warning';\n      case 'error': return 'error';\n      default: return 'default';\n    }\n  };\n\n  const getRunStatusIcon = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'completed': return <CheckCircleIcon color=\"success\" />;\n      case 'failed': return <ErrorIcon color=\"error\" />;\n      case 'running': return <ScheduleIcon color=\"primary\" />;\n      case 'pending': return <ScheduleIcon color=\"action\" />;\n      default: return <ScheduleIcon color=\"action\" />;\n    }\n  };\n\n  const getCardBorderColor = () => {\n    let hasSettings = false;\n    if (project.has_repository_rules || project.has_setup_commands || \n        project.has_secrets || project.has_planning_statement) {\n      hasSettings = true;\n    }\n    \n    if (project.current_agent_run?.status === 'running') {\n      return '#2196f3'; // Blue for running\n    } else if (hasSettings) {\n      return '#4caf50'; // Green for configured\n    }\n    return undefined;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <Card \n      sx={{ \n        height: '100%', \n        display: 'flex', \n        flexDirection: 'column',\n        border: getCardBorderColor() ? `2px solid ${getCardBorderColor()}` : undefined,\n        transition: 'all 0.3s ease',\n        '&:hover': {\n          transform: 'translateY(-2px)',\n          boxShadow: 4\n        }\n      }}\n    >\n      <CardContent sx={{ flexGrow: 1 }}>\n        {/* Header */}\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\" mb={2}>\n          <Box flex={1}>\n            <Typography variant=\"h6\" component=\"h2\" noWrap>\n              {project.name}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n              {project.full_name}\n            </Typography>\n          </Box>\n          \n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            {/* Webhook Status */}\n            <Tooltip title={project.webhook_active ? \"Webhook Active\" : \"Webhook Inactive\"}>\n              <WebhookIcon \n                color={project.webhook_active ? \"success\" : \"disabled\"} \n                fontSize=\"small\" \n              />\n            </Tooltip>\n            \n            {/* Menu */}\n            <IconButton size=\"small\" onClick={handleMenuClick}>\n              <MoreVertIcon />\n            </IconButton>\n          </Box>\n        </Box>\n\n        {/* Description */}\n        {project.description && (\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n            {project.description}\n          </Typography>\n        )}\n\n        {/* Status and Settings Indicators */}\n        <Box display=\"flex\" flexWrap=\"wrap\" gap={1} mb={2}>\n          <Chip \n            label={project.status} \n            color={getStatusColor(project.status) as any}\n            size=\"small\" \n          />\n          \n          {project.has_repository_rules && (\n            <Chip \n              icon={<CodeIcon />} \n              label=\"Rules\" \n              size=\"small\" \n              variant=\"outlined\" \n              color=\"primary\"\n            />\n          )}\n          \n          {project.has_setup_commands && (\n            <Chip \n              icon={<BuildIcon />} \n              label=\"Setup\" \n              size=\"small\" \n              variant=\"outlined\" \n              color=\"primary\"\n            />\n          )}\n          \n          {project.has_secrets && (\n            <Chip \n              icon={<SecurityIcon />} \n              label=\"Secrets\" \n              size=\"small\" \n              variant=\"outlined\" \n              color=\"primary\"\n            />\n          )}\n          \n          {project.auto_merge_enabled && (\n            <Chip \n              icon={<MergeIcon />} \n              label=\"Auto-merge\" \n              size=\"small\" \n              variant=\"outlined\" \n              color=\"success\"\n            />\n          )}\n        </Box>\n\n        {/* Current Agent Run */}\n        {project.current_agent_run && (\n          <Box mb={2}>\n            <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n              {getRunStatusIcon(project.current_agent_run.status)}\n              <Typography variant=\"body2\" fontWeight=\"medium\">\n                Agent Run #{project.current_agent_run.id}\n              </Typography>\n              <Chip \n                label={project.current_agent_run.status} \n                size=\"small\" \n                color={project.current_agent_run.status === 'running' ? 'primary' : 'default'}\n              />\n            </Box>\n            \n            {project.current_agent_run.status === 'running' && (\n              <LinearProgress \n                variant=\"determinate\" \n                value={project.current_agent_run.progress_percentage} \n                sx={{ mb: 1 }}\n              />\n            )}\n            \n            <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n              {project.current_agent_run.target}\n            </Typography>\n            \n            {/* PR Link */}\n            {project.current_agent_run.pr_url && (\n              <Box mt={1}>\n                <Badge badgeContent={project.current_agent_run.pr_number} color=\"primary\">\n                  <Button\n                    size=\"small\"\n                    startIcon={<GitHubIcon />}\n                    href={project.current_agent_run.pr_url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    View PR\n                  </Button>\n                </Badge>\n              </Box>\n            )}\n          </Box>\n        )}\n\n        <Divider sx={{ my: 2 }} />\n\n        {/* Statistics */}\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Box textAlign=\"center\">\n            <Typography variant=\"h6\" color=\"primary\">\n              {project.total_runs}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Total Runs\n            </Typography>\n          </Box>\n          \n          <Box textAlign=\"center\">\n            <Typography variant=\"h6\" color=\"success.main\">\n              {project.success_rate}%\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Success Rate\n            </Typography>\n          </Box>\n          \n          <Box textAlign=\"center\">\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {formatDate(project.created_at)}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Added\n            </Typography>\n          </Box>\n        </Box>\n\n        {/* Auto-confirm Plans Checkbox */}\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={project.auto_confirm_plans}\n              onChange={(e) => onUpdate({ auto_confirm_plans: e.target.checked })}\n              size=\"small\"\n            />\n          }\n          label=\"Auto Confirm Proposed Plans\"\n          sx={{ mt: 1 }}\n        />\n      </CardContent>\n\n      {/* Actions */}\n      <CardActions sx={{ justifyContent: 'space-between', px: 2, pb: 2 }}>\n        <Button\n          variant=\"contained\"\n          startIcon={<PlayArrowIcon />}\n          onClick={onAgentRun}\n          disabled={!!project.current_agent_run?.status && \n                   ['running', 'pending'].includes(project.current_agent_run.status)}\n          fullWidth\n          sx={{ mr: 1 }}\n        >\n          Agent Run\n        </Button>\n        \n        <Tooltip title=\"Project Settings\">\n          <IconButton onClick={onSettings} color=\"primary\">\n            <SettingsIcon />\n          </IconButton>\n        </Tooltip>\n      </CardActions>\n\n      {/* Context Menu */}\n      <Menu\n        anchorEl={menuAnchor}\n        open={menuOpen}\n        onClose={handleMenuClose}\n        transformOrigin={{ horizontal: 'right', vertical: 'top' }}\n        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}\n      >\n        <MenuItem onClick={() => { window.open(project.github_url, '_blank'); handleMenuClose(); }}>\n          <GitHubIcon sx={{ mr: 1 }} />\n          Open in GitHub\n        </MenuItem>\n        \n        <MenuItem onClick={() => { onSettings(); handleMenuClose(); }}>\n          <SettingsIcon sx={{ mr: 1 }} />\n          Project Settings\n        </MenuItem>\n        \n        <MenuItem \n          onClick={() => onUpdate({ auto_merge_enabled: !project.auto_merge_enabled })}\n        >\n          <MergeIcon sx={{ mr: 1 }} />\n          {project.auto_merge_enabled ? 'Disable' : 'Enable'} Auto-merge\n        </MenuItem>\n        \n        <Divider />\n        \n        <MenuItem \n          onClick={() => { onRemove(); handleMenuClose(); }}\n          sx={{ color: 'error.main' }}\n        >\n          <DeleteIcon sx={{ mr: 1 }} />\n          Remove Project\n        </MenuItem>\n      </Menu>\n    </Card>\n  );\n};\n\nexport default ProjectCard;

