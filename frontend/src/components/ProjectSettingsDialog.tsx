import React, { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  Box,\n  Tabs,\n  Tab,\n  IconButton,\n  Alert,\n  Divider,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Chip,\n  Paper,\n  CircularProgress,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Save as SaveIcon,\n  Code as CodeIcon,\n  Build as BuildIcon,\n  Security as SecurityIcon,\n  Psychology as PsychologyIcon,\n  PlayArrow as PlayArrowIcon,\n  ExpandMore as ExpandMoreIcon,\n  Add as AddIcon,\n  Delete as DeleteIcon\n} from '@mui/icons-material';\n\ninterface ProjectSettingsDialogProps {\n  open: boolean;\n  projectId?: number;\n  onClose: () => void;\n  onSave: (settings: any) => void;\n}\n\ninterface ProjectSettings {\n  repository_rules: string;\n  setup_commands: string;\n  setup_branch: string;\n  planning_statement: string;\n  secrets: Record<string, string>;\n  validation_timeout: number;\n  max_validation_retries: number;\n  deployment_commands: string;\n  health_check_url: string;\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`settings-tabpanel-${index}`}\n      aria-labelledby={`settings-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ py: 3 }}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport const ProjectSettingsDialog: React.FC<ProjectSettingsDialogProps> = ({\n  open,\n  projectId,\n  onClose,\n  onSave\n}) => {\n  const [tabValue, setTabValue] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [branches, setBranches] = useState<string[]>([]);\n  const [settings, setSettings] = useState<ProjectSettings>({\n    repository_rules: '',\n    setup_commands: '',\n    setup_branch: 'main',\n    planning_statement: '',\n    secrets: {},\n    validation_timeout: 1800,\n    max_validation_retries: 3,\n    deployment_commands: '',\n    health_check_url: ''\n  });\n  const [secretsText, setSecretsText] = useState('');\n  const [newSecretKey, setNewSecretKey] = useState('');\n  const [newSecretValue, setNewSecretValue] = useState('');\n\n  // Load settings when dialog opens\n  useEffect(() => {\n    if (open && projectId) {\n      loadSettings();\n      loadBranches();\n    }\n  }, [open, projectId]);\n\n  const loadSettings = async () => {\n    if (!projectId) return;\n    \n    try {\n      setLoading(true);\n      const response = await fetch(`/api/projects/${projectId}/settings`);\n      if (response.ok) {\n        const data = await response.json();\n        setSettings(data.settings);\n        \n        // Convert secrets to text format\n        if (data.settings.secrets) {\n          const secretsText = Object.entries(data.settings.secrets)\n            .map(([key, value]) => `${key}=${value}`)\n            .join('\\n');\n          setSecretsText(secretsText);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadBranches = async () => {\n    if (!projectId) return;\n    \n    try {\n      const response = await fetch(`/api/projects/${projectId}/branches`);\n      if (response.ok) {\n        const data = await response.json();\n        setBranches(data.branches.map((b: any) => b.name));\n      }\n    } catch (error) {\n      console.error('Error loading branches:', error);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      \n      // Parse secrets from text\n      const secrets: Record<string, string> = {};\n      if (secretsText.trim()) {\n        secretsText.split('\\n').forEach(line => {\n          const [key, ...valueParts] = line.split('=');\n          if (key && valueParts.length > 0) {\n            secrets[key.trim()] = valueParts.join('=').trim();\n          }\n        });\n      }\n      \n      const updatedSettings = {\n        ...settings,\n        secrets\n      };\n      \n      await onSave(updatedSettings);\n      handleClose();\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleClose = () => {\n    setTabValue(0);\n    setSecretsText('');\n    setNewSecretKey('');\n    setNewSecretValue('');\n    onClose();\n  };\n\n  const handleAddSecret = () => {\n    if (newSecretKey && newSecretValue) {\n      const newLine = `${newSecretKey}=${newSecretValue}`;\n      setSecretsText(prev => prev ? `${prev}\\n${newLine}` : newLine);\n      setNewSecretKey('');\n      setNewSecretValue('');\n    }\n  };\n\n  const runSetupCommands = async () => {\n    if (!projectId || !settings.setup_commands) return;\n    \n    try {\n      const response = await fetch(`/api/projects/${projectId}/setup-commands/run`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ branch: settings.setup_branch })\n      });\n      \n      if (response.ok) {\n        // TODO: Show setup command execution status\n        console.log('Setup commands started');\n      }\n    } catch (error) {\n      console.error('Error running setup commands:', error);\n    }\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { height: '80vh' }\n      }}\n    >\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Typography variant=\"h6\">\n            Project Settings\n          </Typography>\n          \n          <IconButton onClick={handleClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent dividers>\n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n            <CircularProgress />\n          </Box>\n        ) : (\n          <>\n            {/* Tabs */}\n            <Tabs \n              value={tabValue} \n              onChange={(_, newValue) => setTabValue(newValue)}\n              sx={{ borderBottom: 1, borderColor: 'divider', mb: 2 }}\n            >\n              <Tab \n                icon={<PsychologyIcon />} \n                label=\"Planning\" \n                iconPosition=\"start\"\n              />\n              <Tab \n                icon={<CodeIcon />} \n                label=\"Repository Rules\" \n                iconPosition=\"start\"\n              />\n              <Tab \n                icon={<BuildIcon />} \n                label=\"Setup Commands\" \n                iconPosition=\"start\"\n              />\n              <Tab \n                icon={<SecurityIcon />} \n                label=\"Secrets\" \n                iconPosition=\"start\"\n              />\n            </Tabs>\n\n            {/* Planning Statement Tab */}\n            <TabPanel value={tabValue} index={0}>\n              <Typography variant=\"h6\" gutterBottom>\n                Planning Statement\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                This text is sent to the Codegen agent along with the user's request. \n                Use it to provide context, guidelines, or specific instructions.\n              </Typography>\n              \n              <TextField\n                fullWidth\n                multiline\n                rows={8}\n                placeholder=\"You are an expert software engineer working on this project. Please analyze the request carefully and provide a detailed implementation plan that follows best practices...\"\n                value={settings.planning_statement}\n                onChange={(e) => setSettings(prev => ({ ...prev, planning_statement: e.target.value }))}\n                variant=\"outlined\"\n              />\n              \n              <Alert severity=\"info\" sx={{ mt: 2 }}>\n                <Typography variant=\"body2\">\n                  A good planning statement helps the agent understand your project context, \n                  coding standards, and preferred approaches.\n                </Typography>\n              </Alert>\n            </TabPanel>\n\n            {/* Repository Rules Tab */}\n            <TabPanel value={tabValue} index={1}>\n              <Typography variant=\"h6\" gutterBottom>\n                Repository Rules\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                Specify any additional rules you want the agent to follow for this repository.\n              </Typography>\n              \n              <TextField\n                fullWidth\n                multiline\n                rows={8}\n                placeholder=\"- Always write unit tests for new functions\\n- Use TypeScript for all new files\\n- Follow the existing code style\\n- Update documentation when adding new features\\n- Use semantic commit messages\"\n                value={settings.repository_rules}\n                onChange={(e) => setSettings(prev => ({ ...prev, repository_rules: e.target.value }))}\n                variant=\"outlined\"\n              />\n              \n              <Alert severity=\"info\" sx={{ mt: 2 }}>\n                <Typography variant=\"body2\">\n                  These rules will be included in every agent run for this project.\n                </Typography>\n              </Alert>\n            </TabPanel>\n\n            {/* Setup Commands Tab */}\n            <TabPanel value={tabValue} index={2}>\n              <Typography variant=\"h6\" gutterBottom>\n                Setup Commands\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                Commands to run when setting up the sandbox environment for validation.\n              </Typography>\n              \n              <Box mb={2}>\n                <FormControl fullWidth size=\"small\">\n                  <InputLabel>Branch</InputLabel>\n                  <Select\n                    value={settings.setup_branch}\n                    label=\"Branch\"\n                    onChange={(e) => setSettings(prev => ({ ...prev, setup_branch: e.target.value }))}\n                  >\n                    {branches.map(branch => (\n                      <MenuItem key={branch} value={branch}>\n                        {branch}\n                      </MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n              \n              <TextField\n                fullWidth\n                multiline\n                rows={6}\n                placeholder={`cd backend\\npython -m pip install -r requirements.txt\\npython manage.py migrate\\ncd ../frontend\\nnpm install\\nnpm run build`}\n                value={settings.setup_commands}\n                onChange={(e) => setSettings(prev => ({ ...prev, setup_commands: e.target.value }))}\n                variant=\"outlined\"\n                sx={{ mb: 2 }}\n              />\n              \n              <Box display=\"flex\" gap={2} mb={2}>\n                <Button\n                  variant=\"outlined\"\n                  startIcon={<PlayArrowIcon />}\n                  onClick={runSetupCommands}\n                  disabled={!settings.setup_commands}\n                >\n                  Test Run\n                </Button>\n                \n                <Button\n                  variant=\"contained\"\n                  startIcon={<SaveIcon />}\n                  onClick={handleSave}\n                  disabled={saving}\n                >\n                  Save\n                </Button>\n              </Box>\n              \n              <Alert severity=\"warning\" sx={{ mt: 2 }}>\n                <Typography variant=\"body2\">\n                  These commands will be executed in a sandboxed environment during validation.\n                  Make sure they don't require user interaction.\n                </Typography>\n              </Alert>\n            </TabPanel>\n\n            {/* Secrets Tab */}\n            <TabPanel value={tabValue} index={3}>\n              <Typography variant=\"h6\" gutterBottom>\n                Environment Variables / Secrets\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                Environment variables that will be available during agent runs and validation.\n              </Typography>\n              \n              {/* Add Secret Form */}\n              <Accordion sx={{ mb: 2 }}>\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    <AddIcon />\n                    <Typography>Add Secret</Typography>\n                  </Box>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <Box display=\"flex\" gap={2} mb={2}>\n                    <TextField\n                      label=\"Variable Name\"\n                      value={newSecretKey}\n                      onChange={(e) => setNewSecretKey(e.target.value)}\n                      placeholder=\"API_KEY\"\n                      size=\"small\"\n                      sx={{ flex: 1 }}\n                    />\n                    <TextField\n                      label=\"Value\"\n                      value={newSecretValue}\n                      onChange={(e) => setNewSecretValue(e.target.value)}\n                      placeholder=\"your-secret-value\"\n                      type=\"password\"\n                      size=\"small\"\n                      sx={{ flex: 2 }}\n                    />\n                    <Button\n                      variant=\"contained\"\n                      onClick={handleAddSecret}\n                      disabled={!newSecretKey || !newSecretValue}\n                    >\n                      Add\n                    </Button>\n                  </Box>\n                </AccordionDetails>\n              </Accordion>\n              \n              {/* Secrets Text Area */}\n              <TextField\n                fullWidth\n                multiline\n                rows={8}\n                placeholder={`CODEGEN_ORG_ID=323\\nCODEGEN_API_TOKEN=sk-ce027fa7-3c8d-4beb-8c86-ed8ae982ac99\\nDATABASE_URL=postgresql://user:pass@localhost/db\\nAPI_KEY=your-api-key`}\n                value={secretsText}\n                onChange={(e) => setSecretsText(e.target.value)}\n                variant=\"outlined\"\n                helperText=\"Format: KEY=value (one per line)\"\n              />\n              \n              <Alert severity=\"warning\" sx={{ mt: 2 }}>\n                <Typography variant=\"body2\">\n                  <strong>Security:</strong> Secrets are encrypted before storage. \n                  Never commit secrets to your repository.\n                </Typography>\n              </Alert>\n            </TabPanel>\n          </>\n        )}\n      </DialogContent>\n      \n      <DialogActions sx={{ px: 3, py: 2 }}>\n        <Button onClick={handleClose} disabled={saving}>\n          Cancel\n        </Button>\n        \n        <Button\n          variant=\"contained\"\n          startIcon={<SaveIcon />}\n          onClick={handleSave}\n          disabled={saving}\n        >\n          {saving ? 'Saving...' : 'Save Settings'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default ProjectSettingsDialog;

