import React, { useState } from 'react';\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Button,\n  TextField,\n  Typography,\n  Box,\n  FormControlLabel,\n  Checkbox,\n  IconButton,\n  Chip,\n  Alert,\n  Divider\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  PlayArrow as PlayArrowIcon,\n  Psychology as PsychologyIcon,\n  AutoAwesome as AutoAwesomeIcon\n} from '@mui/icons-material';\n\ninterface AgentRunDialogProps {\n  open: boolean;\n  projectName: string;\n  onClose: () => void;\n  onStartRun: (targetText: string, autoConfirmPlans: boolean) => void;\n}\n\nexport const AgentRunDialog: React.FC<AgentRunDialogProps> = ({\n  open,\n  projectName,\n  onClose,\n  onStartRun\n}) => {\n  const [targetText, setTargetText] = useState('');\n  const [autoConfirmPlans, setAutoConfirmPlans] = useState(false);\n  const [starting, setStarting] = useState(false);\n\n  const handleStartRun = async () => {\n    if (!targetText.trim()) return;\n    \n    setStarting(true);\n    try {\n      await onStartRun(targetText.trim(), autoConfirmPlans);\n      handleClose();\n    } catch (error) {\n      console.error('Error starting agent run:', error);\n    } finally {\n      setStarting(false);\n    }\n  };\n\n  const handleClose = () => {\n    setTargetText('');\n    setAutoConfirmPlans(false);\n    setStarting(false);\n    onClose();\n  };\n\n  const exampleTargets = [\n    \"Add user authentication with JWT tokens\",\n    \"Implement a REST API for user management\",\n    \"Create a responsive dashboard with charts\",\n    \"Add unit tests for the payment service\",\n    \"Optimize database queries for better performance\",\n    \"Implement real-time notifications with WebSockets\"\n  ];\n\n  const handleExampleClick = (example: string) => {\n    setTargetText(example);\n  };\n\n  return (\n    <Dialog \n      open={open} \n      onClose={handleClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: { minHeight: '500px' }\n      }}\n    >\n      <DialogTitle>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            <PsychologyIcon color=\"primary\" />\n            <Typography variant=\"h6\">\n              Start Agent Run\n            </Typography>\n          </Box>\n          \n          <IconButton onClick={handleClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n      </DialogTitle>\n      \n      <DialogContent dividers>\n        {/* Project Info */}\n        <Box mb={3}>\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n            Project\n          </Typography>\n          <Chip \n            label={projectName} \n            color=\"primary\" \n            variant=\"outlined\"\n            sx={{ fontWeight: 'medium' }}\n          />\n        </Box>\n\n        {/* Target Text Input */}\n        <Box mb={3}>\n          <Typography variant=\"subtitle1\" gutterBottom fontWeight=\"medium\">\n            Target / Goal\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n            Describe what you want the AI agent to accomplish. Be specific about your requirements.\n          </Typography>\n          \n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            placeholder=\"Example: Add user authentication with JWT tokens, including login/logout endpoints, password hashing, and session management...\"\n            value={targetText}\n            onChange={(e) => setTargetText(e.target.value)}\n            variant=\"outlined\"\n            sx={{ mb: 2 }}\n          />\n          \n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {targetText.length} characters\n          </Typography>\n        </Box>\n\n        {/* Example Targets */}\n        <Box mb={3}>\n          <Typography variant=\"subtitle2\" color=\"text.secondary\" gutterBottom>\n            Example Targets\n          </Typography>\n          <Box display=\"flex\" flexWrap=\"wrap\" gap={1}>\n            {exampleTargets.map((example, index) => (\n              <Chip\n                key={index}\n                label={example}\n                variant=\"outlined\"\n                size=\"small\"\n                onClick={() => handleExampleClick(example)}\n                sx={{ \n                  cursor: 'pointer',\n                  '&:hover': {\n                    backgroundColor: 'action.hover'\n                  }\n                }}\n              />\n            ))}\n          </Box>\n        </Box>\n\n        <Divider sx={{ my: 3 }} />\n\n        {/* Auto-confirm Plans */}\n        <Box mb={3}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={autoConfirmPlans}\n                onChange={(e) => setAutoConfirmPlans(e.target.checked)}\n                color=\"primary\"\n              />\n            }\n            label={\n              <Box>\n                <Typography variant=\"body1\" fontWeight=\"medium\">\n                  Auto Confirm Proposed Plans\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Automatically confirm plans without manual review (faster execution)\n                </Typography>\n              </Box>\n            }\n          />\n        </Box>\n\n        {/* Information Alert */}\n        <Alert severity=\"info\" sx={{ mb: 2 }}>\n          <Typography variant=\"body2\">\n            The agent will analyze your request and create a detailed implementation plan. \n            {autoConfirmPlans \n              ? ' Plans will be automatically confirmed and executed.' \n              : ' You will be able to review and modify the plan before execution.'\n            }\n          </Typography>\n        </Alert>\n\n        {/* Advanced Options Info */}\n        <Box>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            <strong>Note:</strong> The agent will use the project's configured planning statement, \n            repository rules, and environment settings. You can modify these in the project settings.\n          </Typography>\n        </Box>\n      </DialogContent>\n      \n      <DialogActions sx={{ px: 3, py: 2 }}>\n        <Button \n          onClick={handleClose}\n          disabled={starting}\n        >\n          Cancel\n        </Button>\n        \n        <Button\n          variant=\"contained\"\n          startIcon={starting ? <AutoAwesomeIcon /> : <PlayArrowIcon />}\n          onClick={handleStartRun}\n          disabled={!targetText.trim() || starting}\n          sx={{ minWidth: 140 }}\n        >\n          {starting ? 'Starting...' : 'Start Agent Run'}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default AgentRunDialog;

