# =============================================================================
# CodegenCICD Dashboard - Environment Configuration Template
# Copy this file to .env and fill in your actual values
# =============================================================================

# =============================================================================
# DEPLOYMENT CONFIGURATION
# =============================================================================
CONFIG_TIER=basic                    # Options: basic, intermediate, advanced
ENVIRONMENT=development               # Options: development, staging, production
DEBUG=true                           # Set to false in production
LOG_LEVEL=INFO                       # Options: DEBUG, INFO, WARNING, ERROR

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL Database
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=codegencd
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your_secure_postgres_password_here

# Database URL (auto-constructed from above values)
DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=                      # Leave empty if no password
REDIS_URL=redis://${REDIS_HOST}:${REDIS_PORT}/${REDIS_DB}

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Generate these with: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your_secret_key_here_32_chars_minimum
JWT_SECRET_KEY=your_jwt_secret_key_here_32_chars_minimum
ENCRYPTION_KEY=your_encryption_key_here_32_chars_minimum
ENCRYPTION_SALT=your_encryption_salt_here_16_chars_minimum

# Session configuration
SESSION_TIMEOUT=3600                 # Session timeout in seconds (1 hour)
COOKIE_SECURE=false                  # Set to true in production with HTTPS
COOKIE_SAMESITE=lax                  # Options: strict, lax, none

# =============================================================================
# EXTERNAL API INTEGRATIONS
# =============================================================================
# Codegen Agent API
CODEGEN_ORG_ID=your_codegen_org_id_here
CODEGEN_API_TOKEN=sk-your_codegen_api_token_here

# GitHub Integration
GITHUB_TOKEN=YOUR_GITHUB_TOKEN_HERE

# Google Gemini API
GEMINI_API_KEY=your_gemini_api_key_here

# Cloudflare Integration
CLOUDFLARE_API_KEY=your_cloudflare_api_key_here
CLOUDFLARE_ACCOUNT_ID=your_cloudflare_account_id_here
CLOUDFLARE_WORKER_NAME=your_worker_name_here
CLOUDFLARE_WORKER_URL=https://your-worker.your-subdomain.workers.dev

# =============================================================================
# VALIDATION TOOLS CONFIGURATION
# =============================================================================
# Grainchain (Sandboxing)
GRAINCHAIN_ENABLED=true
GRAINCHAIN_HOST=localhost
GRAINCHAIN_PORT=8001
GRAINCHAIN_URL=http://${GRAINCHAIN_HOST}:${GRAINCHAIN_PORT}
GRAINCHAIN_WORKSPACE_DIR=/tmp/grainchain_workspaces

# Web-Eval-Agent (UI Testing)
WEB_EVAL_ENABLED=true
WEB_EVAL_HOST=localhost
WEB_EVAL_PORT=8002
WEB_EVAL_URL=http://${WEB_EVAL_HOST}:${WEB_EVAL_PORT}

# Graph-Sitter (Code Quality)
GRAPH_SITTER_ENABLED=true
GRAPH_SITTER_HOST=localhost
GRAPH_SITTER_PORT=8003
GRAPH_SITTER_URL=http://${GRAPH_SITTER_HOST}:${GRAPH_SITTER_PORT}
GRAPH_SITTER_LANGUAGES=typescript,javascript,python,rust,go

# =============================================================================
# CELERY CONFIGURATION (Intermediate+ Tier)
# =============================================================================
CELERY_BROKER_URL=${REDIS_URL}
CELERY_RESULT_BACKEND=${REDIS_URL}
CELERY_TASK_SERIALIZER=json
CELERY_RESULT_SERIALIZER=json
CELERY_ACCEPT_CONTENT=json
CELERY_TIMEZONE=UTC
CELERY_ENABLE_UTC=true

# =============================================================================
# MONITORING CONFIGURATION (Advanced Tier)
# =============================================================================
# Prometheus
PROMETHEUS_ENABLED=false
PROMETHEUS_HOST=localhost
PROMETHEUS_PORT=9090

# Grafana
GRAFANA_ENABLED=false
GRAFANA_HOST=localhost
GRAFANA_PORT=3001
GRAFANA_PASSWORD=admin

# Sentry (Error Tracking)
SENTRY_DSN=                          # Add your Sentry DSN here
SENTRY_ENVIRONMENT=${ENVIRONMENT}
SENTRY_TRACES_SAMPLE_RATE=0.1

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================
REACT_APP_API_URL=http://localhost:8000
REACT_APP_WS_URL=ws://localhost:8000
REACT_APP_ENVIRONMENT=${ENVIRONMENT}
REACT_APP_VERSION=1.0.0

# =============================================================================
# DOCKER CONFIGURATION
# =============================================================================
# Docker socket for grainchain integration
DOCKER_HOST=unix:///var/run/docker.sock

# Container resource limits
CONTAINER_MEMORY_LIMIT=512m
CONTAINER_CPU_LIMIT=0.5

# =============================================================================
# NGINX CONFIGURATION (Production)
# =============================================================================
NGINX_HOST=localhost
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443
SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
SSL_KEY_PATH=/etc/nginx/ssl/key.pem

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================
# Hot reload and debugging
HOT_RELOAD=true
DEBUG_MODE=true
PROFILING_ENABLED=false

# Test database (for running tests)
TEST_DATABASE_URL=postgresql+asyncpg://postgres:test_password@localhost:5432/codegencd_test

# =============================================================================
# PRODUCTION OVERRIDES
# =============================================================================
# Uncomment and modify these for production deployment
# DEBUG=false
# LOG_LEVEL=WARNING
# COOKIE_SECURE=true
# PROMETHEUS_ENABLED=true
# GRAFANA_ENABLED=true
# SENTRY_TRACES_SAMPLE_RATE=0.01

# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. Never commit this file with real secrets to version control
# 2. Use a secrets management system in production (AWS Secrets Manager, etc.)
# 3. Rotate secrets regularly
# 4. Use strong, unique passwords for all services
# 5. Enable SSL/TLS in production
# 6. Restrict database and Redis access to necessary services only
# 7. Use environment-specific configurations

# =============================================================================
# QUICK SETUP COMMANDS
# =============================================================================
# 1. Copy this template: cp .env.template .env
# 2. Generate secrets: python scripts/generate_secrets.py
# 3. Update API keys with your actual values
# 4. Start services: docker-compose up -d
# 5. Run migrations: docker-compose exec backend alembic upgrade head
